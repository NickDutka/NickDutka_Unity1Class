//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/RubeRoldberg/Scripts/VRInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @VRInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @VRInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""VRInputActions"",
    ""maps"": [
        {
            ""name"": ""Default"",
            ""id"": ""ed10a9da-ae54-4f06-b100-0c88c5a4d531"",
            ""actions"": [
                {
                    ""name"": ""RightHandPrimary"",
                    ""type"": ""Button"",
                    ""id"": ""1b062388-523a-4c4c-b8df-791aafb26e21"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Joystick"",
                    ""type"": ""Value"",
                    ""id"": ""d75c3996-a51b-499b-8a7d-7574acaaec6c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightTrigger"",
                    ""type"": ""Value"",
                    ""id"": ""7e0c4ad4-7e70-494a-926a-54117b874461"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftHandSecondary"",
                    ""type"": ""Button"",
                    ""id"": ""7fba62e0-c4d3-47bd-ab41-035538ea68f8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftHandPrimary"",
                    ""type"": ""Button"",
                    ""id"": ""1f62641c-9f70-4444-8f48-42b6a30c9e06"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b3481af1-2a21-4396-ab56-b55190ea8919"",
                    ""path"": ""<OculusTouchController>{RightHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightHandPrimary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7ff05fb4-6fcf-4a60-8cc0-cacae4336a47"",
                    ""path"": ""<OculusTouchController>/thumbstick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Joystick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4186e05e-fe9d-4428-8f87-fb5a199c2a27"",
                    ""path"": ""<OculusTouchController>{RightHand}/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightTrigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7a110cc0-799f-4aa0-942c-6fe133018efd"",
                    ""path"": ""<OculusTouchController>{LeftHand}/secondaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftHandSecondary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""35ff6127-6f65-4593-acff-6462fbbbebdd"",
                    ""path"": ""<OculusTouchController>{LeftHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftHandPrimary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Default
        m_Default = asset.FindActionMap("Default", throwIfNotFound: true);
        m_Default_RightHandPrimary = m_Default.FindAction("RightHandPrimary", throwIfNotFound: true);
        m_Default_Joystick = m_Default.FindAction("Joystick", throwIfNotFound: true);
        m_Default_RightTrigger = m_Default.FindAction("RightTrigger", throwIfNotFound: true);
        m_Default_LeftHandSecondary = m_Default.FindAction("LeftHandSecondary", throwIfNotFound: true);
        m_Default_LeftHandPrimary = m_Default.FindAction("LeftHandPrimary", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Default
    private readonly InputActionMap m_Default;
    private IDefaultActions m_DefaultActionsCallbackInterface;
    private readonly InputAction m_Default_RightHandPrimary;
    private readonly InputAction m_Default_Joystick;
    private readonly InputAction m_Default_RightTrigger;
    private readonly InputAction m_Default_LeftHandSecondary;
    private readonly InputAction m_Default_LeftHandPrimary;
    public struct DefaultActions
    {
        private @VRInputActions m_Wrapper;
        public DefaultActions(@VRInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @RightHandPrimary => m_Wrapper.m_Default_RightHandPrimary;
        public InputAction @Joystick => m_Wrapper.m_Default_Joystick;
        public InputAction @RightTrigger => m_Wrapper.m_Default_RightTrigger;
        public InputAction @LeftHandSecondary => m_Wrapper.m_Default_LeftHandSecondary;
        public InputAction @LeftHandPrimary => m_Wrapper.m_Default_LeftHandPrimary;
        public InputActionMap Get() { return m_Wrapper.m_Default; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DefaultActions set) { return set.Get(); }
        public void SetCallbacks(IDefaultActions instance)
        {
            if (m_Wrapper.m_DefaultActionsCallbackInterface != null)
            {
                @RightHandPrimary.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnRightHandPrimary;
                @RightHandPrimary.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnRightHandPrimary;
                @RightHandPrimary.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnRightHandPrimary;
                @Joystick.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnJoystick;
                @Joystick.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnJoystick;
                @Joystick.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnJoystick;
                @RightTrigger.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnRightTrigger;
                @RightTrigger.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnRightTrigger;
                @RightTrigger.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnRightTrigger;
                @LeftHandSecondary.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnLeftHandSecondary;
                @LeftHandSecondary.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnLeftHandSecondary;
                @LeftHandSecondary.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnLeftHandSecondary;
                @LeftHandPrimary.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnLeftHandPrimary;
                @LeftHandPrimary.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnLeftHandPrimary;
                @LeftHandPrimary.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnLeftHandPrimary;
            }
            m_Wrapper.m_DefaultActionsCallbackInterface = instance;
            if (instance != null)
            {
                @RightHandPrimary.started += instance.OnRightHandPrimary;
                @RightHandPrimary.performed += instance.OnRightHandPrimary;
                @RightHandPrimary.canceled += instance.OnRightHandPrimary;
                @Joystick.started += instance.OnJoystick;
                @Joystick.performed += instance.OnJoystick;
                @Joystick.canceled += instance.OnJoystick;
                @RightTrigger.started += instance.OnRightTrigger;
                @RightTrigger.performed += instance.OnRightTrigger;
                @RightTrigger.canceled += instance.OnRightTrigger;
                @LeftHandSecondary.started += instance.OnLeftHandSecondary;
                @LeftHandSecondary.performed += instance.OnLeftHandSecondary;
                @LeftHandSecondary.canceled += instance.OnLeftHandSecondary;
                @LeftHandPrimary.started += instance.OnLeftHandPrimary;
                @LeftHandPrimary.performed += instance.OnLeftHandPrimary;
                @LeftHandPrimary.canceled += instance.OnLeftHandPrimary;
            }
        }
    }
    public DefaultActions @Default => new DefaultActions(this);
    public interface IDefaultActions
    {
        void OnRightHandPrimary(InputAction.CallbackContext context);
        void OnJoystick(InputAction.CallbackContext context);
        void OnRightTrigger(InputAction.CallbackContext context);
        void OnLeftHandSecondary(InputAction.CallbackContext context);
        void OnLeftHandPrimary(InputAction.CallbackContext context);
    }
}
